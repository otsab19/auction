{"version":3,"sources":["jquery.syotimer.js"],"names":["$","DAY_IN_SEC","HOUR_IN_SEC","MINUTE_IN_SEC","lang","rus","second","minute","hour","day","eng","DEFAULTS","year","month","timeZone","ignoreTransferTime","periodic","periodInterval","periodUnit","dayVisible","dubleNumbers","doubleNumbers","effectType","headTitle","footTitle","afterDeadline","timerBlock","bodyBlock","html","SyoTimer","init","settings","options","extend","hasOwnProperty","this","each","elementBox","data","_render","apply","_perSecondHandler","timerDom","dayCellDom","staticMethod","getCellDom","addClass","headBlock","footBlock","timerBlocks","css","currentDate","Date","deadLineDate","differenceInMilliSec","getDifferenceWithTimezone","secondsToDeadLine","getSecondsToDeadLine","_refreshUnitsDom","_applyEffectSwitch","unitList","unitsToDeadLine","getUnitsToDeadLine","language","splice","i","length","unit","cls","format2","definitionOfNumerals","element","setTimeout","animate","opacity","startCountFormat","differenceInSeconds","Math","floor","additionalInUnit","differenceInUnit","periodUnitInSeconds","getPeriodUnit","fullTimeUnitsBetween","ceil","abs","unitInMilliSec","given_period_unit","amendment","differenceByLocalTimezone","getTime","amendmentOnTimezone","amendmentOnTransferTime","timezoneOffset","parseFloat","localTimezoneOffset","getTimezoneOffset","currentTimezoneOffset","deadLineTimezoneOffset","number","isUse","titles","index","cases","methods","setOption","name","value","fn","syotimer","otherArgs","Array","prototype","slice","call","arguments","error","jQuery"],"mappings":"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","file":"jquery.syotimer.min.js","sourcesContent":["(function($){\n    const DAY_IN_SEC = 24 * 60 * 60;\n    const HOUR_IN_SEC = 60 * 60;\n    const MINUTE_IN_SEC = 60;\n\n    var lang = {\n        rus: {\n            second: ['секунда', 'секунды', 'секунд'],\n            minute: ['минута', 'минуты', 'минут'],\n            hour: ['час', 'часа', 'часов'],\n            day: ['день', 'дня', 'дней']\n        },\n        eng: {\n            second: ['second', 'seconds'],\n            minute: ['minute', 'minutes'],\n            hour: ['hour', 'hours'],\n            day: ['day', 'days']\n        }\n    };\n\n    const DEFAULTS = {\n        year: 2014,\n        month: 7,\n        day: 31,\n        hour: 0,\n        minute: 0,\n        second: 0,\n        timeZone: 'local',\n        ignoreTransferTime: false,\n\n        periodic: false, // true - таймер периодичный\n        periodInterval: 7, // (если periodic установлен как true) период таймера. Единица измерения указывается в periodType\n        periodUnit: 'd', // единица измерения периода таймера\n\n        dayVisible: true, // показывать ли количество дней, если нет, то количество часов может превышать 23\n        dubleNumbers: true, // показывать часы, минуты и секунды с ведущими нолями ( 2часа 5минут 4секунды = 02:05:04)\n        doubleNumbers: true, // показывать часы, минуты и секунды с ведущими нолями ( 2часа 5минут 4секунды = 02:05:04)\n        effectType: 'none', // эффект отсчета таймера: 'none' - нет эффекта, 'opacity' - выцветание\n        lang: 'eng',\n\n        headTitle: '', // текст над таймером (можно в HTML формате)\n        footTitle: '', // текст под таймером (можно в HTML формате)\n        afterDeadline: function(timerBlock){\n            timerBlock.bodyBlock.html('<p style=\"font-size: 1.2em;\">The countdown is finished!</p>');\n        }\n    };\n\n    var SyoTimer = {\n        /**\n         * Init syotimer on DOM\n         * @param settings\n         * @returns {Array|Object|*}\n         */\n        init: function(settings) {\n            var options = $.extend({}, DEFAULTS, settings || {});\n            if ( settings.hasOwnProperty(\"dubleNumbers\") ) { // handler of deprecated options\n                options.doubleNumbers = settings.dubleNumbers;\n            }\n            return this.each(function() {\n                var elementBox = $(this);\n                elementBox.data('syotimer-options', options);\n                SyoTimer._render.apply(this, []);\n                SyoTimer._perSecondHandler.apply(this, []);\n            });\n        },\n\n        /**\n         * Rendering base elements of countdown\n         * @private\n         */\n        _render: function() {\n            var elementBox = $(this),\n                options = elementBox.data('syotimer-options'),\n                timerDom,\n                dayCellDom = ( options.dayVisible) ? staticMethod.getCellDom('day', '0') : '';\n            timerDom = '' +\n                '<div class=\"timer-head-block\">' + options.headTitle + '</div>' +\n                '<div class=\"timer-body-block\">' +\n                    dayCellDom +\n                    staticMethod.getCellDom('hour') +\n                    staticMethod.getCellDom('minute') +\n                    staticMethod.getCellDom('second') +\n                '</div>' +\n                '<div class=\"timer-foot-block\">' + options.footTitle + '</div>';\n            elementBox.addClass('syotimer')\n                .addClass('timer')\n                .html( timerDom );\n            var headBlock = $('.timer-head-block', elementBox),\n                bodyBlock = $('.timer-body-block', elementBox),\n                footBlock = $('.timer-foot-block', elementBox),\n                timerBlocks = {\n                    headBlock: headBlock,\n                    bodyBlock: bodyBlock,\n                    footBlock: footBlock\n                };\n            elementBox.data('syotimer-blocks', timerBlocks);\n        },\n\n        /**\n         * Handler called per seconds while countdown is not over\n         * @private\n         */\n        _perSecondHandler: function() {\n            var elementBox = $(this),\n                options = elementBox.data('syotimer-options');\n            $('.second .tab-val', elementBox).css( 'opacity', 1 );\n            var currentDate = new Date(),\n                deadLineDate = new Date(\n                    options.year,\n                    options.month - 1,\n                    options.day,\n                    options.hour,\n                    options.minute,\n                    options.second\n                ),\n                differenceInMilliSec = staticMethod.getDifferenceWithTimezone(currentDate, deadLineDate, options),\n                secondsToDeadLine = staticMethod.getSecondsToDeadLine(differenceInMilliSec, options);\n            if ( secondsToDeadLine >= 0 ) {\n                SyoTimer._refreshUnitsDom.apply(this, [secondsToDeadLine]);\n                SyoTimer._applyEffectSwitch.apply(this, [options.effectType]);\n            } else {\n                elementBox = $.extend(elementBox, elementBox.data('syotimer-blocks'));\n                options.afterDeadline( elementBox );\n            }\n        },\n\n        /**\n         * Refresh unit DOM of countdown\n         * @param secondsToDeadLine\n         * @private\n         */\n        _refreshUnitsDom: function(secondsToDeadLine) {\n            var elementBox = $(this),\n                options = elementBox.data('syotimer-options'),\n                unitList = ['day', 'hour', 'minute', 'second'],\n                unitsToDeadLine = staticMethod.getUnitsToDeadLine( secondsToDeadLine ),\n                language = lang[options.lang];\n\n            if ( !options.dayVisible ) {\n                unitsToDeadLine.hour += unitsToDeadLine.day * 24;\n                unitList.splice(0, 1);\n            }\n            for(var i = 0; i < unitList.length; i++) {\n                var unit = unitList[i],\n                    cls = '.' + unit;\n                $(cls + ' .tab-val', elementBox).html(staticMethod.format2(\n                    unitsToDeadLine[unit],\n                    (unit != 'day') ? options.doubleNumbers : false\n                ));\n                $(cls + ' .tab-unit', elementBox).html(staticMethod.definitionOfNumerals(\n                    unitsToDeadLine[unit],\n                    language[unit],\n                    options.lang\n                ));\n            }\n        },\n\n        /**\n         * Applying effect of changing numbers\n         * @param effectType\n         * @private\n         */\n        _applyEffectSwitch: function(effectType) {\n            var element = this,\n                elementBox = $(element);\n            switch ( effectType ){\n                case 'none':\n                    setTimeout( function(){\n                        SyoTimer._perSecondHandler.apply(element, []);\n                    }, 1000);\n                    break;\n                case 'opacity':\n                    $('.second .tab-val', elementBox).animate(\n                        {opacity: 0.1 },\n                        1000,\n                        'linear',\n                        function() {\n                            SyoTimer._perSecondHandler.apply(element, []);\n                        }\n                    );\n                    break;\n            }\n        }\n    };\n\n    var staticMethod = {\n        /**\n         * Return once cell DOM of countdown: day, hour, minute, second\n         * @param cls               class of cell\n         * @param startCountFormat\n         * @returns {string}\n         */\n        getCellDom: function(cls, startCountFormat) {\n            cls = cls || '';\n            startCountFormat = startCountFormat || '00';\n            return '' +\n                '<div class=\"table-cell ' + cls + '\">' +\n                    '<div class=\"tab-val\">' + startCountFormat + '</div>' +\n                    '<div class=\"tab-metr tab-unit\"></div>' +\n                '</div>';\n        },\n\n        /**\n         * Getting count of seconds to deadline\n         * @param differenceInMilliSec\n         * @param options\n         * @returns {*}\n         */\n        getSecondsToDeadLine: function(differenceInMilliSec, options) {\n            var secondsToDeadLine,\n                differenceInSeconds = differenceInMilliSec / 1000;\n            differenceInSeconds = Math.floor( differenceInSeconds );\n            if ( options.periodic ) {\n                var additionalInUnit,\n                    differenceInUnit,\n                    periodUnitInSeconds = staticMethod.getPeriodUnit(options.periodUnit),\n                    fullTimeUnitsBetween = differenceInMilliSec / (periodUnitInSeconds * 1000);\n                fullTimeUnitsBetween = Math.ceil( fullTimeUnitsBetween );\n                fullTimeUnitsBetween = Math.abs( fullTimeUnitsBetween );\n                if ( differenceInSeconds >= 0 ) {\n                    differenceInUnit = fullTimeUnitsBetween % options.periodInterval;\n                    differenceInUnit = ( differenceInUnit == 0 )? options.periodInterval : differenceInUnit;\n                    differenceInUnit -= 1;\n                } else {\n                    differenceInUnit = options.periodInterval - fullTimeUnitsBetween % options.periodInterval;\n                }\n                additionalInUnit = differenceInSeconds % periodUnitInSeconds;\n\n                // fix когда дедлайн раньше текущей даты,\n                // возникает баг с неправильным расчетом интервала при different пропорциональной periodUnit\n                if ( ( additionalInUnit == 0 ) && ( differenceInSeconds < 0 ) ) {\n                    differenceInUnit--;\n                }\n                secondsToDeadLine = Math.abs( differenceInUnit * periodUnitInSeconds + additionalInUnit );\n            } else {\n                secondsToDeadLine = differenceInSeconds;\n            }\n            return secondsToDeadLine;\n        },\n\n        /**\n         * Getting count of units to deadline\n         * @param secondsToDeadLine\n         * @returns {{}}\n         */\n        getUnitsToDeadLine: function(secondsToDeadLine) {\n            var unitList = ['day', 'hour', 'minute', 'second'],\n                unitsToDeadLine = {};\n            for (var i = 0; i < unitList.length; i++) {\n                var unit = unitList[i],\n                    unitInMilliSec = staticMethod.getPeriodUnit(unit);\n                unitsToDeadLine[unit] = Math.floor(secondsToDeadLine / unitInMilliSec);\n                secondsToDeadLine = secondsToDeadLine % unitInMilliSec;\n            }\n            return unitsToDeadLine;\n        },\n\n        /**\n         * Determine a unit of period in milliseconds\n         * @param given_period_unit\n         * @returns {number}\n         */\n        getPeriodUnit: function(given_period_unit) {\n            switch (given_period_unit) {\n                case 'd':\n                case 'day':\n                    return DAY_IN_SEC;\n                case 'h':\n                case 'hour':\n                    return HOUR_IN_SEC;\n                case 'm':\n                case 'minute':\n                    return MINUTE_IN_SEC;\n                case 's':\n                case 'second':\n                    return 1;\n            }\n        },\n\n        getDifferenceWithTimezone: function(currentDate, deadLineDate, options) {\n            var differenceByLocalTimezone = deadLineDate.getTime() - currentDate.getTime(),\n                amendmentOnTimezone = 0,\n                amendmentOnTransferTime = 0,\n                amendment;\n            if ( options.timeZone !== 'local' ) {\n                var timezoneOffset = parseFloat(options.timeZone) * staticMethod.getPeriodUnit('hour'),\n                    localTimezoneOffset = - currentDate.getTimezoneOffset() * staticMethod.getPeriodUnit('minute');\n                amendmentOnTimezone = (timezoneOffset - localTimezoneOffset) * 1000;\n            }\n            if ( options.ignoreTransferTime ) {\n                var currentTimezoneOffset = -currentDate.getTimezoneOffset() * staticMethod.getPeriodUnit('minute'),\n                    deadLineTimezoneOffset = -deadLineDate.getTimezoneOffset() * staticMethod.getPeriodUnit('minute');\n                amendmentOnTransferTime = (currentTimezoneOffset - deadLineTimezoneOffset) * 1000;\n            }\n            amendment = amendmentOnTimezone + amendmentOnTransferTime;\n            return differenceByLocalTimezone - amendment;\n        },\n\n        /**\n         * Formation of numbers with leading zeros\n         * @param number\n         * @param isUse\n         * @returns {string}\n         */\n        format2: function(number, isUse) {\n            isUse = (isUse !== false);\n            return ( ( number <= 9 ) && isUse ) ? ( \"0\" + number ) : ( \"\" + number );\n        },\n\n        /**\n         * Getting the correct declension of words after numerals\n         * @param number\n         * @param titles\n         * @param lang\n         * @returns {*}\n         */\n        definitionOfNumerals: function(number, titles, lang) {\n            switch (lang) {\n                case 'rus':\n                    var cases = [2, 0, 1, 1, 1, 2],\n                        index;\n                    if ( number % 100 > 4 && number % 100 < 20 ) {\n                        index = 2;\n                    } else {\n                        index = cases[(number % 10 < 5) ? number % 10 : 5];\n                    }\n                    return titles[index];\n                case 'eng':\n                    return titles[ ( number == 1 ) ? 0 : 1 ];\n            }\n        }\n\n    };\n\n    var methods = {\n        setOption: function(name, value) {\n            var elementBox = $(this),\n                options = elementBox.data('syotimer-options');\n            if ( options.hasOwnProperty( name ) ) {\n                options[name] = value;\n                elementBox.data('syotimer-options', options);\n            }\n        }\n    };\n\n    $.fn.syotimer = function(options){\n        if ( typeof options == 'string' && ( options === \"setOption\" ) ) {\n            var otherArgs = Array.prototype.slice.call(arguments, 1);\n            return this.each(function() {\n                methods[options].apply( this, otherArgs );\n            });\n        } else if (options === null || typeof options == 'object'){\n            return SyoTimer.init.apply(this, [options]);\n        } else {\n            $.error('SyoTimer. Error in call methods: methods is not exist');\n        }\n    };\n})(jQuery);\n"],"sourceRoot":"/source/"}